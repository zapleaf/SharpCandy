using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SharpCandy
{
    public class Fadecandy
    {
        public static byte[] VideoArray { get; set; } = new byte[1600];

        /// <summary>
        /// This represents the list of LEDs or Pixels as if they were in a straight line or strip. So 8 strips of 64 LEDs placed end-to-end
        /// </summary>
        public static int[,] LEDStripMap { get; } = new int[8, 64]
        {
            {1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,65,68,71,74,77,80,83,86,89,92,95,98,101,104,107,110,113,116,119,122,125,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,193},
            {196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,257,260,263,266,269,272,275,278,281,284,287,290,293,296,299,302,305,308,311,314,317,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,385,388},
            {391,394,397,400,403,406,409,412,415,418,421,424,427,430,433,436,439,442,445,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,513,516,519,522,525,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,577,580,583},
            {586,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,641,644,647,650,653,656,659,662,665,668,671,674,677,680,683,686,689,692,695,698,701,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,769,772,775,778},
            {781,784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,897,900,903,906,909,912,915,918,921,924,927,930,933,936,939,942,945,948,951,954,957,961,964,967,970,973},
            {976,979,982,985,988,991,994,997,1000,1003,1006,1009,1012,1015,1018,1021,1025,1028,1031,1034,1037,1040,1043,1046,1049,1052,1055,1058,1061,1064,1067,1070,1073,1076,1079,1082,1085,1089,1092,1095,1098,1101,1104,1107,1110,1113,1116,1119,1122,1125,1128,1131,1134,1137,1140,1143,1146,1149,1153,1156,1159,1162,1165,1168},
            {1171,1174,1177,1180,1183,1186,1189,1192,1195,1198,1201,1204,1207,1210,1213,1217,1220,1223,1226,1229,1232,1235,1238,1241,1244,1247,1250,1253,1256,1259,1262,1265,1268,1271,1274,1277,1281,1284,1287,1290,1293,1296,1299,1302,1305,1308,1311,1314,1317,1320,1323,1326,1329,1332,1335,1338,1341,1345,1348,1351,1354,1357,1360,1363},
            {1366,1369,1372,1375,1378,1381,1384,1387,1390,1393,1396,1399,1402,1405,1409,1412,1415,1418,1421,1424,1427,1430,1433,1436,1439,1442,1445,1448,1451,1454,1457,1460,1463,1466,1469,1473,1476,1479,1482,1485,1488,1491,1494,1497,1500,1503,1506,1509,1512,1515,1518,1521,1524,1527,1530,1533,1537,1540,1543,1546,1549,1552,1555,1558}
        };

        /// <summary>
        /// This represents the LEDs or Pixels as if each of the 8 channels has an 8x8 grid of LEDs. So the array is setup like [Channel,Row,Column].
        /// </summary>
        public static int[,,] LED8x8Map { get; } = new int[8, 8, 8]
        {
            {{ 1,4,7,10,13,16,19,22 },{ 25,28,31,34,37,40,43,46 },{ 49,52,55,58,61,65,68,71 },{ 74,77,80,83,86,89,92,95 },{ 98,101,104,107,110,113,116,119 },{ 122,125,129,132,135,138,141,144 },{ 147,150,153,156,159,162,165,168 },{ 171,174,177,180,183,186,189,193 } },
            {{196,199,202,205,208,211,214,217 },{220,223,226,229,232,235,238,241 },{244,247,250,253,257,260,263,266 },{269,272,275,278,281,284,287,290 },{293,296,299,302,305,308,311,314 },{317,321,324,327,330,333,336,339 },{342,345,348,351,354,357,360,363 },{366,369,372,375,378,381,385,388 } },
            {{391,394,397,400,403,406,409,412 },{415,418,421,424,427,430,433,436 },{439,442,445,449,452,455,458,461 },{464,467,470,473,476,479,482,485 },{488,491,494,497,500,503,506,509 },{513,516,519,522,525,528,531,534 },{537,540,543,546,549,552,555,558 },{561,564,567,570,573,577,580,583 } },
            {{586,589,592,595,598,601,604,607 },{610,613,616,619,622,625,628,631 },{634,637,641,644,647,650,653,656 },{659,662,665,668,671,674,677,680 },{683,686,689,692,695,698,701,705 },{708,711,714,717,720,723,726,729 },{732,735,738,741,744,747,750,753 },{756,759,762,765,769,772,775,778 } },
            {{781,784,787,790,793,796,799,802 },{805,808,811,814,817,820,823,826 },{829,833,836,839,842,845,848,851 },{854,857,860,863,866,869,872,875 },{878,881,884,887,890,893,897,900 },{903,906,909,912,915,918,921,924 },{927,930,933,936,939,942,945,948 },{951,954,957,961,964,967,970,973 } },
            {{976,979,982,985,988,991,994,997 },{1000,1003,1006,1009,1012,1015,1018,1021 },{1025,1028,1031,1034,1037,1040,1043,1046 },{1049,1052,1055,1058,1061,1064,1067,1070 },{1073,1076,1079,1082,1085,1089,1092,1095 },{1098,1101,1104,1107,1110,1113,1116,1119 },{1122,1125,1128,1131,1134,1137,1140,1143 },{1146,1149,1153,1156,1159,1162,1165,1168 } },
            {{1171,1174,1177,1180,1183,1186,1189,1192 },{1195,1198,1201,1204,1207,1210,1213,1217 },{1220,1223,1226,1229,1232,1235,1238,1241 },{1244,1247,1250,1253,1256,1259,1262,1265 },{1268,1271,1274,1277,1281,1284,1287,1290 },{1293,1296,1299,1302,1305,1308,1311,1314 },{1317,1320,1323,1326,1329,1332,1335,1338 },{1341,1345,1348,1351,1354,1357,1360,1363 } },
            {{1366,1369,1372,1375,1378,1381,1384,1387 },{1390,1393,1396,1399,1402,1405,1409,1412 },{1415,1418,1421,1424,1427,1430,1433,1436 },{1439,1442,1445,1448,1451,1454,1457,1460 },{1463,1466,1469,1473,1476,1479,1482,1485 },{1488,1491,1494,1497,1500,1503,1506,1509 },{1512,1515,1518,1521,1524,1527,1530,1533 },{1537,1540,1543,1546,1549,1552,1555,1558 } }
        };

        /// <summary>
        /// Contains a default Look Up Table (LUT). Fadecandy requires a LUT be sent before any video frames.
        /// </summary>
        public static byte[] LookUpTable { get; } = new byte[1600]
            {64,0,0,0,0,0,1,0,3,0,6,0,11,0,16,0,23,0,31,0,41,0,52,0,64,0,78,0,93,0,109,0,127,0,147,0,168,0,190,0,214,0,240,0,11,1,40,1,70,1,102,1,136,1,171,1,208,1,247,1,32,2,74,2,65,0,118,2,163,2,210,2,3,3,54,3,107,3,161,3,217,3,19,4,79,4,141,4,204,4,14,5,81,5,150,5,221,5,37,6,112,6,188,6,11,7,91,7,173,7,2,8,88,8,176,8,10,9,101,9,195,9,35,10,133,10,233,10,66,0,78,11,182,11,32,12,139,12,249,12,105,13,219,13,78,14,196,14,60,15,182,15,50,16,176,16,48,17,178,17,54,18,188,18,69,19,207,19,92,20,234,20,123,21,14,22,163,22,58,23,211,23,110,24,12,25,171,25,77,26,241,26,67,0,151,27,63,28,233,28,150,29,69,30,245,30,168,31,94,32,21,33,207,33,138,34,72,35,9,36,203,36,144,37,86,38,31,39,235,39,184,40,136,41,90,42,46,43,5,44,221,44,184,45,149,46,117,47,87,48,59,49,33,50,10,51,68,0,244,51,225,52,209,53,195,54,183,55,173,56,165,57,160,58,158,59,157,60,159,61,163,62,170,63,178,64,190,65,203,66,219,67,237,68,1,70,24,71,50,72,77,73,107,74,139,75,174,76,211,77,250,78,36,80,80,81,126,82,175,83,69,0,227,84,24,86,80,87,139,88,200,89,7,91,72,92,140,93,211,94,28,96,103,97,181,98,5,100,87,101,172,102,4,104,93,105,186,106,24,108,121,109,221,110,67,112,172,113,22,115,132,116,244,117,102,119,219,120,82,122,204,123,72,125,70,0,198,126,72,128,203,129,81,131,218,132,101,134,242,135,130,137,21,139,170,140,65,142,219,143,120,145,23,147,185,148,93,150,3,152,172,153,88,155,6,157,183,158,106,160,32,162,216,163,147,165,80,167,16,169,210,170,151,172,95,174,41,176,71,0,245,177,197,179,150,181,107,183,65,185,27,187,247,188,213,190,182,192,154,194,128,196,105,198,84,200,66,202,51,204,38,206,28,208,20,210,15,212,13,214,13,216,16,218,21,220,29,222,39,224,52,226,68,228,87,230,108,232,131,234,157,236,72,0,186,238,218,240,252,242,32,245,72,247,114,249,158,251,206,253,255,255,0,0,0,0,1,0,3,0,6,0,11,0,16,0,23,0,31,0,41,0,52,0,64,0,78,0,93,0,109,0,127,0,147,0,168,0,190,0,214,0,240,0,11,1,73,0,40,1,70,1,102,1,136,1,171,1,208,1,247,1,32,2,74,2,118,2,163,2,210,2,3,3,54,3,107,3,161,3,217,3,19,4,79,4,141,4,204,4,14,5,81,5,150,5,221,5,37,6,112,6,188,6,11,7,91,7,173,7,74,0,2,8,88,8,176,8,10,9,101,9,195,9,35,10,133,10,233,10,78,11,182,11,32,12,139,12,249,12,105,13,219,13,78,14,196,14,60,15,182,15,50,16,176,16,48,17,178,17,54,18,188,18,69,19,207,19,92,20,234,20,123,21,75,0,14,22,163,22,58,23,211,23,110,24,12,25,171,25,77,26,241,26,151,27,63,28,233,28,150,29,69,30,245,30,168,31,94,32,21,33,207,33,138,34,72,35,9,36,203,36,144,37,86,38,31,39,235,39,184,40,136,41,90,42,46,43,76,0,5,44,221,44,184,45,149,46,117,47,87,48,59,49,33,50,10,51,244,51,225,52,209,53,195,54,183,55,173,56,165,57,160,58,158,59,157,60,159,61,163,62,170,63,178,64,190,65,203,66,219,67,237,68,1,70,24,71,50,72,77,73,77,0,107,74,139,75,174,76,211,77,250,78,36,80,80,81,126,82,175,83,227,84,24,86,80,87,139,88,200,89,7,91,72,92,140,93,211,94,28,96,103,97,181,98,5,100,87,101,172,102,4,104,93,105,186,106,24,108,121,109,221,110,67,112,78,0,172,113,22,115,132,116,244,117,102,119,219,120,82,122,204,123,72,125,198,126,72,128,203,129,81,131,218,132,101,134,242,135,130,137,21,139,170,140,65,142,219,143,120,145,23,147,185,148,93,150,3,152,172,153,88,155,6,157,183,158,106,160,79,0,32,162,216,163,147,165,80,167,16,169,210,170,151,172,95,174,41,176,245,177,197,179,150,181,107,183,65,185,27,187,247,188,213,190,182,192,154,194,128,196,105,198,84,200,66,202,51,204,38,206,28,208,20,210,15,212,13,214,13,216,16,218,80,0,21,220,29,222,39,224,52,226,68,228,87,230,108,232,131,234,157,236,186,238,218,240,252,242,32,245,72,247,114,249,158,251,206,253,255,255,0,0,0,0,1,0,3,0,6,0,11,0,16,0,23,0,31,0,41,0,52,0,64,0,78,0,81,0,93,0,109,0,127,0,147,0,168,0,190,0,214,0,240,0,11,1,40,1,70,1,102,1,136,1,171,1,208,1,247,1,32,2,74,2,118,2,163,2,210,2,3,3,54,3,107,3,161,3,217,3,19,4,79,4,141,4,204,4,14,5,82,0,81,5,150,5,221,5,37,6,112,6,188,6,11,7,91,7,173,7,2,8,88,8,176,8,10,9,101,9,195,9,35,10,133,10,233,10,78,11,182,11,32,12,139,12,249,12,105,13,219,13,78,14,196,14,60,15,182,15,50,16,176,16,83,0,48,17,178,17,54,18,188,18,69,19,207,19,92,20,234,20,123,21,14,22,163,22,58,23,211,23,110,24,12,25,171,25,77,26,241,26,151,27,63,28,233,28,150,29,69,30,245,30,168,31,94,32,21,33,207,33,138,34,72,35,9,36,84,0,203,36,144,37,86,38,31,39,235,39,184,40,136,41,90,42,46,43,5,44,221,44,184,45,149,46,117,47,87,48,59,49,33,50,10,51,244,51,225,52,209,53,195,54,183,55,173,56,165,57,160,58,158,59,157,60,159,61,163,62,170,63,85,0,178,64,190,65,203,66,219,67,237,68,1,70,24,71,50,72,77,73,107,74,139,75,174,76,211,77,250,78,36,80,80,81,126,82,175,83,227,84,24,86,80,87,139,88,200,89,7,91,72,92,140,93,211,94,28,96,103,97,181,98,5,100,86,0,87,101,172,102,4,104,93,105,186,106,24,108,121,109,221,110,67,112,172,113,22,115,132,116,244,117,102,119,219,120,82,122,204,123,72,125,198,126,72,128,203,129,81,131,218,132,101,134,242,135,130,137,21,139,170,140,65,142,219,143,120,145,87,0,23,147,185,148,93,150,3,152,172,153,88,155,6,157,183,158,106,160,32,162,216,163,147,165,80,167,16,169,210,170,151,172,95,174,41,176,245,177,197,179,150,181,107,183,65,185,27,187,247,188,213,190,182,192,154,194,128,196,105,198,84,200,120,0,66,202,51,204,38,206,28,208,20,210,15,212,13,214,13,216,16,218,21,220,29,222,39,224,52,226,68,228,87,230,108,232,131,234,157,236,186,238,218,240,252,242,32,245,72,247,114,249,158,251,206,253,255,255,0,0,0,0,0,0,0,0};

        // The default LUT above was create from the following python example.
        // Taken from: https://github.com/scanlime/fadecandy/blob/master/examples/python/usb-lowlevel.py
        // # Set up a default color LUT
        // lut = [0] * (64 * 25)
        // for index in range(25):
        //     lut[index*64] = index | 0x40
        // lut[24*64] |= 0x20
        // for channel in range(3):
        //     for row in range(257):
        //         value = min(0xFFFF, int(pow(row / 256.0, 2.2) * 0x10000))
        //         i = channel * 257 + row
        //         packetNum = i / 31
        //         packetIndex = i % 31
        //         #print("%d, %d = 0x%04x" % (channel, row, value))
        //         lut[packetNum*64 + 2 + packetIndex*2] = value & 0xFF
        //         lut[packetNum*64 + 3 + packetIndex*2] = value >> 8
        // lutPackets = ''.join(map(chr, lut))
        // #print(binascii.b2a_hex(lutPackets))
        // dev.write(1, lutPackets)
        // print("LUT programmed")

        public class Pipe
        {
            public const UInt32 InterruptInPipeIndex = 0;
            public const UInt32 InterruptOutPipeIndex = 0;
            public const UInt32 BulkInPipeIndex = 0;
            public const UInt32 BulkOutPipeIndex = 0;
        }

        // A USB device that is plugged in identifies itself by its VID/PID combination. 
        // The PC uses the VID/PID combination to find the drivers (if any) that are to be used for the USB device.

        /// <summary>
        /// A VID is a 16-bit vendor number (Vendor ID). 
        /// </summary>
        public const UInt16 DeviceVid = 0x1d50;

        /// <summary>
        /// A PID is a 16-bit product number (Product ID). 
        /// </summary>
        public const UInt16 DevicePid = 0x607a;
        public const string Name = "Fadecandy";


        /*
        The device has a single Bulk OUT endpoint which expects packets of up to 
        64 bytes. Multiple packets may be transmitted in one LibUSB "write" operation, 
        as long as the buffer you provide is a multiple of 64 bytes in length.

        Each packet begins with an 8-bit control byte, which is divided into three bit-fields:

        Bits 7..6	 Bit 5          Bits 4..0
        ---------    -----------    ------------
        Type code	 'Final' bit	Packet index

        The 'type' code indicates what kind of packet this is.
        The 'final' bit, if set, causes the most recent group of packets to take effect
        The packet index is used to sequence packets within a particular type code
        The following packet types are recognized:

        Type code	Meaning of 'final' bit	        Index range	    Packet contents
        ---------   ----------------------          -----------     -----------------------------
            0	    Interpolate to new video frame	0 … 24	        Up to 21 pixels, 24-bit RGB
            1	    Instantly apply new color LUT	0 … 24	        Up to 31 16-bit lookup table entries
            2	    (reserved)	                    0	            Set configuration data
            3			                            (reserved)
        */

        public class ControlByte
        {
            public const byte NewVideoFrame = 0b00000000; // 00000000 - 0
            public const byte FinalVideoFrame = 0b00100000; // 00100000 - 32
            public const byte NewColorLUT = 0b01000000;   // 01000000 - 64
            public const byte FinalColorLUT = 0b01100000;   // 01100000 - 96
            public const byte Configuration = 0b10000000; // 10000000 - 128
        }

        /* A type 2 packet sets optional device-wide configuration settings:
           Byte Offset     Bits        Description
           -----------     -----       ----------------------------------------------------------
                0           7 … 0	    Control byte
                1	        7 … 5	    (reserved)
                1	        4	        0 = Normal mode, 1 = Reserved operation mode
                1	        3	        Manual LED control bit
                1	        2	        0 = LED shows USB activity, 1 = LED under manual control
                1	        1	        Disable keyframe interpolation
                1	        0	        Disable dithering
                2 … 63	    7 … 0	    (reserved)
        */

        /// <summary>
        /// Contains the various configuration values and some combinations.
        /// </summary>
        public class ConfigurationSettings
        {
            private const UInt16 DisableDithering = 0x01;        // 00000001
            private const UInt16 DisableKeyFrameInterop = 0x02;  // 00000010
            private const UInt16 EnableManualLEDControl = 0x04;  // 00000100
            private const UInt16 DisableManualLEDControl = 0x00;  // 00000000
            private const UInt16 ManualLEDOn = 0x08;             // 00001000
            private const UInt16 ManualLEDOff = 0x00;             // 00000000

            public static byte TurnLEDOn = EnableManualLEDControl | ManualLEDOn;
            public static byte TurnLEDOff = DisableManualLEDControl | ManualLEDOff;
            public static byte TurnAllOff = DisableKeyFrameInterop | DisableDithering;
        }


        /// <summary>
        /// Turns all the pixels off by passing "0" for all RGB values
        /// </summary>
        public static void LoadVideoBlank() { LoadVideo(0x00, 0x00, 0x00); }
        public static void LoadVideoRed() { LoadVideo(0x40, 0x00, 0x00); }
        public static void LoadVideoGreen() { LoadVideo(0x00, 0x40, 0x00); }
        public static void LoadVideoBlue() { LoadVideo(0x00, 0x00, 0x40); }

        /// <summary>
        /// Loads a video frame based on the RGB values given.
        /// </summary>
        /// <param name="red">Brightness of Red portion</param>
        /// <param name="green">Brightness of Green portion</param>
        /// <param name="blue">Brightness of Blue portion</param>
        public static void LoadVideo(byte red, byte green, byte blue)
        {
            for (int y = 0; y < 25; y++)
            {
                VideoArray[y * 64] = (byte)y;

                for (int x = 1; x <= 63; x += 3)
                {
                    VideoArray[(y * 64) + x] = red;
                    VideoArray[(y * 64) + x + 1] = green;
                    VideoArray[(y * 64) + x + 2] = blue;
                }
            }

            VideoArray[1536] = 56;
        }

        /// <summary>
        /// Loads the video frame with all white pixels of varying brightness.
        /// </summary>
        /// <param name="rangeMin">Maximum Brightness</param>
        /// <param name="rangeMax">Minimum Brightness</param>
        public static void LoadVideoRandomWhite(byte rangeMin, byte rangeMax)
        {
            Random rndLocation = new Random(DateTime.Now.Millisecond);

            for (int y = 0; y < 25; y++)
            {
                VideoArray[y * 64] = (byte)y;

                for (int x = 1; x <= 63; x += 3)
                {
                    byte range = (byte)rndLocation.Next(rangeMin, rangeMax);
                    VideoArray[(y * 64) + x] = range;
                    VideoArray[(y * 64) + x + 1] = range;
                    VideoArray[(y * 64) + x + 2] = range;
                }
            }

            VideoArray[1536] = 56;
        }


    }
}
